{"name":"Docker4","tagline":"Registrator analyze ","body":"`registrator源码的简单分析：`   \r\n\r\n1.前面文章介绍了registrator是用来干啥的，在简单回顾一下． \r\n====\r\nregistrator是用来检测docker容器启动的服务以及所暴露的端口，然后把其注册到第三方存储系统，如ETCD.Consul.SKYDNS等．\r\n\r\n2.下面简单的说一下其registrator的原理：    \r\n====\r\n  其实说白了registrator就是监听docker的sock　event，由于有新的docker容器启动的时候都会与docker－daemondocker进行通信．\r\n　然后就是利用这一点来进行获取相关信息．    \r\n\r\n      其实可以通过监听的事件然后得到新启动容器的id，然后调用docker api　（docker inspect id类似）来获取更多容器中相关信息\r\n　（如：暴露的端口启动服务的ip等等）．   \r\n　\r\n　　　然后相应的容器服务的信息就到手了，此时再根据用户选择的第三方存储系统(ETCD.Consul.SKYDNS)组织成相应的数据进行调用第\r\n　三方的rest api进行相应的注册．  \r\n\r\n\r\n3.registrator最值得学习的就是使用了一个设计模式（适配器/桥接模式）    \r\n===\r\n    在源码目录中是这样的：        \r\n    bridge        circle.yml  consulkv    Dockerfile.dev  etcd     Makefile    modules.go  registrator.go  SPONSORS\r\n    CHANGELOG.md  consul      Dockerfile  docs            LICENSE  mkdocs.yml  README.md   skydns2         VERSION\r\n\r\n其中在bridge中就作为中间层，使得registrator不关心用户使用的第三方存储系统．   \r\n这一块主要设计到的go的interface特性．     \r\n \r\n\r\n\r\n\r\n欢迎一起交流学习 \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/u/2786211992/home)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n\r\n\r\n","google":"Registrator analyze ","note":"Don't delete this file! It's used internally to help with page regeneration."}